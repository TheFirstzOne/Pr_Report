// üìä PR Expense Dashboard - Google Apps Script Backend
// ‡∏ß‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ‡πÉ‡∏ô Google Apps Script Project

/**
 * üöÄ ‡∏™‡∏£‡πâ‡∏≤‡∏á Web App ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á PR Dashboard
 */
function doGet() {
  return HtmlService.createTemplateFromFile('dashboard')
    .evaluate()
    .setTitle('PR Expense Monitoring Dashboard')
    .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);
}

/**
 * üìÅ ‡∏£‡∏ß‡∏°‡πÑ‡∏ü‡∏•‡πå HTML/CSS/JS ‡πÄ‡∏Ç‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô
 */
function include(filename) {
  return HtmlService.createHtmlOutputFromFile(filename).getContent();
}

/**
 * üìä ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google Sheets ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
 */
function getPRData() {
  try {
    // ‡πÄ‡∏õ‡∏¥‡∏î Google Sheets (‡πÉ‡∏™‡πà ID ‡∏Ç‡∏≠‡∏á Google Sheets ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà)
    const spreadsheet = SpreadsheetApp.openById('189G2MUOTfR1en6_8pjLJ2zP4TKEGQWF4gxNtwkCacj0');
    const sheet = spreadsheet.getSheetByName('PR');
    
    if (!sheet) {
      throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö Sheet ‡∏ä‡∏∑‡πà‡∏≠ "PR"');
    }
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const data = sheet.getDataRange().getValues();
    const headers = data[0];
    const rows = data.slice(1);
    
    console.log(`‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ ${rows.length} ‡πÅ‡∏ñ‡∏ß`);
    
    // ‡∏´‡∏≤ index ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    const dateIndex = headers.indexOf('DATE');
    const prNoIndex = headers.indexOf('Pr No.');
    const totalPriceIndex = headers.indexOf('TOTAL PRICE');
    const orderIndex = headers.indexOf('ORDER');
    const qtyIndex = headers.indexOf('QTY.');
    const unitIndex = headers.indexOf('UNIT');
    const statusIndex = headers.indexOf('STATUS');
    
    if (dateIndex === -1 || totalPriceIndex === -1) {
      throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå DATE ‡∏´‡∏£‡∏∑‡∏≠ TOTAL PRICE');
    }
    
    // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const processedData = [];
    const monthlyData = {};
    const allPRs = [];
    const uniquePRNumbers = new Set(); // ‡πÄ‡∏Å‡πá‡∏ö PR No. ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô
    
    rows.forEach((row, index) => {
      const date = row[dateIndex];
      const totalPrice = parseFloat(row[totalPriceIndex]);
      const prNo = row[prNoIndex];
      const status = row[statusIndex] ? row[statusIndex].toString().toLowerCase().trim() : '';
      
      // ‡∏Ç‡πâ‡∏≤‡∏°‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
      if (!date || isNaN(totalPrice)) return;
      
      // ‡∏Ç‡πâ‡∏≤‡∏° PR ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ operate ‡∏´‡∏£‡∏∑‡∏≠ cancel
      if (status === 'operate' || status === 'cancel' || status === 'cancelled') return;
      
      // ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
      let dateObj;
      if (date instanceof Date) {
        dateObj = date;
      } else {
        dateObj = new Date(date);
      }
      
      if (isNaN(dateObj.getTime())) return;
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á key ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢)
      const monthNames = [
        '‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°', '‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå', '‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°', '‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô', 
        '‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°', '‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô', '‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°', '‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°',
        '‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô', '‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°', '‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô', '‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°'
      ];
      
      const monthKey = `${monthNames[dateObj.getMonth()]} ${dateObj.getFullYear()}`;
      
      // ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
      if (!monthlyData[monthKey]) {
        monthlyData[monthKey] = {
          month: monthKey,
          totalExpense: 0,
          recordCount: 0,
          activeRecordCount: 0,
          maxExpense: 0,
          uniquePRCount: 0,
          monthlyUniquePRs: new Set()
        };
      }
      
      monthlyData[monthKey].totalExpense += totalPrice;
      monthlyData[monthKey].recordCount += 1;
      monthlyData[monthKey].activeRecordCount += 1;
      monthlyData[monthKey].maxExpense = Math.max(monthlyData[monthKey].maxExpense, totalPrice);
      
      // ‡πÄ‡∏Å‡πá‡∏ö PR ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ operate/cancel) - ‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏°‡πâ PR No. ‡∏à‡∏∞‡∏ã‡πâ‡∏≥
      // ‡πÄ‡∏û‡∏¥‡πà‡∏° PR No. ‡πÉ‡∏ô‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏ö unique
      if (prNo) {
        uniquePRNumbers.add(prNo);
        monthlyData[monthKey].monthlyUniquePRs.add(prNo);
      }
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏∏‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô allPRs (‡∏£‡∏ß‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà PR No. ‡∏ã‡πâ‡∏≥‡∏î‡πâ‡∏ß‡∏¢)
      allPRs.push({
        prNo: prNo || `NO_PR_${index + 2}`, // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ PR No. ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á ID ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
        amount: totalPrice,
        date: Utilities.formatDate(dateObj, Session.getScriptTimeZone(), 'yyyy-MM-dd'),
        month: monthKey,
        item: row[orderIndex] || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏',
        qty: row[qtyIndex] || '',
        unit: row[unitIndex] || '',
        status: row[statusIndex] || 'PENDING',
        rowIndex: index + 2 // ‡πÄ‡∏Å‡πá‡∏ö row number ‡πÉ‡∏ô sheet ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö reference
      });
      
      processedData.push({
        date: dateObj,
        totalPrice: totalPrice,
        month: monthKey
      });
    });
    
    // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô Array ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö
    const monthlySummary = Object.values(monthlyData).sort((a, b) => {
      const monthOrder = [
        '‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°', '‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå', '‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°', '‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô', 
        '‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°', '‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô', '‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°', '‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°',
        '‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô', '‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°', '‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô', '‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°'
      ];
      
      const aMonth = a.month.split(' ')[0];
      const bMonth = b.month.split(' ')[0];
      const aYear = parseInt(a.month.split(' ')[1]);
      const bYear = parseInt(b.month.split(' ')[1]);
      
      if (aYear !== bYear) return aYear - bYear;
      return monthOrder.indexOf(aMonth) - monthOrder.indexOf(bMonth);
    });
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô unique PR ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡πÅ‡∏•‡∏∞‡∏•‡∏ö Set ‡∏≠‡∏≠‡∏Å (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ error ‡πÉ‡∏ô JSON)
    monthlySummary.forEach(month => {
      month.uniquePRCount = month.monthlyUniquePRs.size;
      delete month.monthlyUniquePRs; // ‡∏•‡∏ö Set ‡∏≠‡∏≠‡∏Å‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ serialize ‡πÄ‡∏õ‡πá‡∏ô JSON ‡πÑ‡∏î‡πâ
    });
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå
    const totalExpense = monthlySummary.reduce((sum, month) => sum + month.totalExpense, 0);
    monthlySummary.forEach(month => {
      month.percentage = totalExpense > 0 ? (month.totalExpense / totalExpense * 100) : 0;
    });
    
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö PR ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô
    allPRs.sort((a, b) => b.amount - a.amount);
    
    const result = {
      monthlySummary: monthlySummary,
      allPRs: allPRs,
      totalRecords: processedData.length,
      totalExpense: totalExpense,
      uniquePRCount: uniquePRNumbers.size, // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô PR ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô
      dateRange: {
        min: processedData.length > 0 ? Math.min(...processedData.map(d => d.date.getTime())) : null,
        max: processedData.length > 0 ? Math.max(...processedData.map(d => d.date.getTime())) : null
      }
    };
    
    console.log('‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', {
      totalRecords: result.totalRecords,
      monthlyCount: result.monthlySummary.length,
      allPRsCount: result.allPRs.length,
      uniquePRCount: result.uniquePRCount,
      totalExpense: result.totalExpense
    });
    
    return result;
    
  } catch (error) {
    console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error.toString());
    return {
      error: error.toString(),
      monthlySummary: [],
      allPRs: [],
      totalRecords: 0,
      totalExpense: 0,
      uniquePRCount: 0
    };
  }
}

/**
 * üîß ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
 */
function formatNumber(num) {
  if (typeof num !== 'number') return '0';
  return num.toLocaleString('th-TH', { 
    minimumFractionDigits: 0, 
    maximumFractionDigits: 0 
  });
}

/**
 * üîß ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏á‡∏¥‡∏ô
 */
function formatCurrency(num) {
  if (typeof num !== 'number') return '0 ‡∏ø';
  return num.toLocaleString('th-TH', { 
    minimumFractionDigits: 0, 
    maximumFractionDigits: 0 
  }) + ' ‡∏ø';
}

/**
 * üìä ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debug)
 */
function testGetPRData() {
  const data = getPRData();
  console.log('‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:', JSON.stringify(data, null, 2));
  return data;
}

/**
 * üöÄ Deploy Web App
 * 1. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ
 * 2. ‡πÑ‡∏õ‡∏ó‡∏µ‡πà Deploy > New Deployment
 * 3. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Type: Web app
 * 4. Execute as: Me
 * 5. Who has access: Anyone
 * 6. ‡∏Ñ‡∏•‡∏¥‡∏Å Deploy
 */
